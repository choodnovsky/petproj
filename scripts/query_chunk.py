import json
from sentence_transformers import SentenceTransformer
import chromadb
from tqdm import tqdm
import argparse
import ollama

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
context = ""  # –ù–∞—á–∞–ª—å–Ω—ã–π –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_qa_pairs(json_file):
    with open(json_file, "r", encoding="utf-8") as file:
        qa_pairs = json.load(file)
    return qa_pairs


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def update_context(question, answer):
    global context
    context += f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n---\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç


# –ó–∞–ø—Ä–æ—Å –≤ ChromaDB
def query_chromadb(collection: str, question: str, top_k: int = 4):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chroma
    client = chromadb.HttpClient(host="localhost", port=8000)
    collection = client.get_collection(collection)

    # –≠–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
    model = SentenceTransformer("all-MiniLM-L6-v2")
    question_embedding = model.encode([question])[0].tolist()

    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤
    print("üîé –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏...")
    results = collection.query(
        query_embeddings=[question_embedding],
        n_results=top_k,
        include=["documents", "distances"]
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
    if not results or "documents" not in results or not results["documents"]:
        print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    documents = results["documents"][0]
    distances = results.get("distances", [None])[0]

    print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(documents)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤\n")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
    print("üß© –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
    context_parts = []
    for i, doc in tqdm(enumerate(documents)):
        distance = distances[i] if distances else "N/A"
        print(f"üîπ –ß–∞–Ω–∫ #{i + 1} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}):\n{doc}\n")
        context_parts.append(doc.strip())

    global context
    context += "\n".join(context_parts)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ —Å —Ü–µ–ø–æ—á–∫–æ–π —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
def query_with_thought_chain(question):
    global context
    prompt = f"""
    –¢—ã ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º. –†–∞–∑–±–µ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —à–∞–≥–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    –ö–æ–Ω—Ç–µ–∫—Å—Ç:
    {context}
    –í–æ–ø—Ä–æ—Å:
    {question}
    –û—Ç–≤–µ—Ç (—Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º):
    """

    print("\nü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É –º–æ–¥–µ–ª–∏...\n")
    response = ollama.chat(
        model="llama3",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å LLaMA3
        messages=[{"role": "user", "content": prompt}]
    )

    answer = response["message"]["content"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º
    update_context(question, answer)

    return answer


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–∑ JSON
def integrate_qa_pairs(qa_pairs):
    global context
    for pair in qa_pairs:
        question = pair["question"]
        answer = pair["answer"]
        update_context(question, answer)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="RAG-–≤–æ–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏")
    parser.add_argument("--collection", type=str, required=True, help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ChromaDB")
    parser.add_argument("--question", type=str, required=True, help="–í–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
    parser.add_argument("--qa-file", type=str, required=False, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–∞—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
                        default="./data/qa_pairs.json")

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ JSON
    qa_pairs = load_qa_pairs(args.qa_file)

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    integrate_qa_pairs(qa_pairs)

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ ChromaDB
    query_chromadb(args.collection, args.question)

    # –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    answer = query_with_thought_chain(args.question)

    print("üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
    print(answer)